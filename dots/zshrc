# If not running interactively, don't do anything
case $- in
	*i*) ;;
	*) return;;
esac

# Some stuff shouldn't be in this file
[ -e ~/.bash_secrets ] && source ~/.bash_secrets

# Default stuff
export EDITOR=nvim

# Color config and aliases
alias ls='ls -G'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'

# Aliases
alias vim=nvim
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias rscp='rsync -rclh --progress'
alias gdiff='diff -urN --color=always'
alias gcomm='git log | head -n 1'

# Copy stdin to clipboard
cbcopy() {
	if [ "$(uname)" = "Darwin" ]; then
		pbcopy
	elif [ -z "$WAYLAND_DISPLAY" ]; then
		sed -z '$ s/\n$//' | xclip -i -selection clipboard
	else
		sed -z '$ s/\n$//' | wl-copy
	fi
}

# Get clipboard data
cbget() {
	if [ "$(uname)" = "Darwin" ]; then
		pbpaste
	elif [ -z "$WAYLAND_DISPLAY" ]; then
		xclip -o -selection clipboard
	else
		wl-paste
	fi
}

# Upload to p.mort.coffee
bin() {
	if [ -z "$1" ]; then
		curl --silent --upload-file - https://p.mort.coffee | tee >(cbcopy)
	else
		curl --silent --upload-file "$1" https://p.mort.coffee | tee >(cbcopy)
	fi
}

# Create a temp dir, spawn a shell there, delete when done
tmp() {
	local dir="$(mktemp -d "/tmp/$USER.tmp.XXXXXXXX")"
	(cd "$dir"; $SHELL)
	rm -rf "$dir"
}

# Make .. go up once, ... up twice, etc
dots() {
	for _ in $(seq 1 $1); do
		cd ..
	done
}
dots_acc="."
for i in $(seq 1 10); do
	dots_acc="$dots_acc."
	alias "$dots_acc"="dots $i"
done

# Connect to a tmux session over ssh
sst() {
	if [ -z "$1" ] || [ -z "$2" ]; then
		echo "Usage: $0 <host> <tmux session>"
		return 1
	fi
	ssh -t "$1" "tmux attach -t '$2'"
}

# Go up, until the cwd ends with "$1"
to() {
	if [ -z "$1" ]; then
		echo "Usage: $0 <path fragment>"
		return 1
	fi

	if ! pwd | grep "$1/" >/dev/null; then
		echo "$1: not in the cwd"
		return 1
	fi

	while :; do
		wd="$(pwd)"

		# 'pwd' never seems to return paths with multiple successive slashes,
		# so checking if "$1//" is contained in "$wd//" is a "reliable" way to
		# check if "$wd" ends with "$1" using only posix sh.
		if [ "$wd" = "/" ] || printf "%s" "$wd//" | grep "$1//" >/dev/null; then
			return
		fi
		cd ..
	done
}

# Env vars
export PATH="/usr/lib/go-1.13/bin:$HOME/go/bin:$HOME/.cargo/bin:$HOME/.local/bin:$PATH"

# Completion
autoload -Uz compinit && compinit
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' menu yes select

# Load local stuff
[ -e ~/.bashrc-local ] && source ~/.bashrc-local || true
[ -e "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# Keys
bindkey -e

##
# Prompt
##

autoload -U colors && colors
setopt PROMPT_SUBST

PS1='$(starstruck --zsh -e $?)'

#if [ "$USER" = root ]; then
#	PROMPT_USER="%{$reset_color%}%{${fg[red]}%}$USER%{$reset_color%}@"
#else
#	PROMPT_USER=""
#fi
#
#prompt_git() {
#	if prompt_current_branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"; then
#		local space=0
#		if [ "$prompt_current_branch" != master ]; then
#			printf "%s" "%{${fg_bold[red]}%}$prompt_current_branch"
#			space=1
#		fi
#		if ! [ -z "$(git status --porcelain)" ]; then
#			printf "%s" "%{${fg_bold[yellow]}%}*"
#			space=1
#		fi
#		if [ $space = 1 ]; then
#			printf " "
#		fi
#	fi
#}
#
#PROMPT_GIT='$(prompt_git)'
#
#if [ -z "$SSH_CLIENT" ]; then
#	PROMPT_HOST="$PROMPT_USER%{${fg_bold[yellow]}%}%m "
#else
#	PROMPT_HOST="%{${fg_bold[green]}%}âˆž $PROMPT_USER%{${fg_bold[red]}%}%m "
#fi
#PROMPT_CWD="%{${fg_bold[cyan]}%}%~ "
#PROMPT_ARROW="%(?:%{$fg_bold[green]%}$ :%{$fg_bold[red]%}$ %s)"
#PS1="$PROMPT_HOST$PROMPT_CWD$PROMPT_GIT$PROMPT_ARROW%{$reset_color%}"
